"""add tz

Revision ID: f82f20f171c0
Revises: 4af94624fa2d
Create Date: 2025-07-13 18:23:55.545161

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f82f20f171c0'
down_revision: Union[str, Sequence[str], None] = '4af94624fa2d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint(op.f('uq_groups_id'), 'groups', ['id'])
    op.alter_column('tasks', 'creation_date',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('tasks', 'deadline',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('tasks', 'pass_date',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.create_unique_constraint(op.f('uq_tasks_id'), 'tasks', ['id'])
    op.create_unique_constraint(op.f('uq_users_id'), 'users', ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f('uq_users_id'), 'users', type_='unique')
    op.drop_constraint(op.f('uq_tasks_id'), 'tasks', type_='unique')
    op.alter_column('tasks', 'pass_date',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('tasks', 'deadline',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('tasks', 'creation_date',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.drop_constraint(op.f('uq_groups_id'), 'groups', type_='unique')
    # ### end Alembic commands ###
